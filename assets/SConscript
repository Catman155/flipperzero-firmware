Import("env", "lib_flags")

import os
import subprocess
import SCons

assetsenv = env.Clone()
assetsenv.MergeFlags(lib_flags)

assetsenv.Append(
    ASSETS_COMPILER="scripts/assets.py",
    NANOPB_COMPILER="lib/nanopb/generator/nanopb_generator.py",
)


def icons_emitter(target, source, env):
    target = [
        "assets_icons.c",
        "assets_icons.h",
    ]
    return target, source


def proto_emitter(target, source, env):
    out_path = target[0].path
    target = list()
    for src in source:
        basename = os.path.splitext(src.name)[0]
        target.append(File(basename + ".pb.c"))
        target.append(File(basename + ".pb.h"))
    return target, source


def dolphin_emitter(target, source, env):
    res_root_dir = source[0].Dir(env["DOLPHIN_RES_TYPE"])
    source = [res_root_dir]
    source.extend(
        env.GlobRecursive("*.*", res_root_dir),
    )

    target_base_dir = target[0]
    env.Replace(_DOLPHIN_OUT_DIR=target[0])

    if env["DOLPHIN_RES_TYPE"] == "external":
        target = []
        target.extend(
            map(
                lambda node: target_base_dir.File(
                    res_root_dir.rel_path(node).replace(".png", ".bm")
                ),
                filter(lambda node: isinstance(node, SCons.Node.FS.File), source),
            )
        )
    else:
        asset_basename = f"assets_dolphin_{env['DOLPHIN_RES_TYPE']}"
        target = [
            target_base_dir.File(asset_basename + ".c"),
            target_base_dir.File(asset_basename + ".h"),
        ]

    return target, source


def _invoke_git(args, source_dir):
    cmd = ["git"]
    cmd.extend(args)
    return (
        subprocess.check_output(cmd, cwd=source_dir, stderr=subprocess.STDOUT)
        .strip()
        .decode()
    )


def proto_ver_generator(target, source, env):
    target_file = target[0].abspath
    src_dir = source[0].dir.abspath
    try:
        git_fetch = _invoke_git(
            ["fetch", "--tags"],
            source_dir=src_dir,
        )
    except (subprocess.CalledProcessError, EnvironmentError) as e:
        # Not great, not terrible
        print("Git: fetch failed")

    try:
        git_describe = _invoke_git(
            ["describe", "--tags", "--abbrev=0"],
            source_dir=src_dir,
        )
    except (subprocess.CalledProcessError, EnvironmentError) as e:
        print("Git: describe failed")
        Exit("git error")

    # print("describe=", git_describe)
    git_major, git_minor = git_describe.split(".")
    version_file_data = (
        "#pragma once",
        f"#define PROTOBUF_MAJOR_VERSION {git_major}",
        f"#define PROTOBUF_MINOR_VERSION {git_minor}",
        "",
    )
    with open(target_file, "wt") as file:
        file.write("\n".join(version_file_data))


assetsenv.Append(
    BUILDERS={
        "IconBuilder": Builder(
            action=Action(
                "${PYTHON3} ${ASSETS_COMPILER} icons ${SOURCE.posix} ${TARGET.dir.posix}",
                "\tICONS\t${TARGET}",
            ),
            emitter=icons_emitter,
        ),
        "ProtoBuilder": Builder(
            action=Action(
                "${PYTHON3} ${NANOPB_COMPILER} -q -I${SOURCE.dir.posix} -D${TARGET.dir.posix} ${SOURCES.posix}",
                "\tPROTO\t${SOURCE}",
            ),
            emitter=proto_emitter,
            suffix=".pb.c",
            src_suffix=".proto",
        ),
        "DolphinSymBuilder": Builder(
            action=Action(
                '${PYTHON3} ${ASSETS_COMPILER} dolphin -s dolphin_${DOLPHIN_RES_TYPE} "${SOURCE}" "${_DOLPHIN_OUT_DIR}"',
                "\tDOLPHIN\t${DOLPHIN_RES_TYPE}",
            ),
            emitter=dolphin_emitter,
        ),
        "DolphinExtBuilder": Builder(
            action=Action(
                '${PYTHON3} ${ASSETS_COMPILER} dolphin "${SOURCE}" "${_DOLPHIN_OUT_DIR}"',
                "\tDOLPHIN\t${DOLPHIN_RES_TYPE}",
            ),
            emitter=dolphin_emitter,
        ),
    }
)


icons_src = assetsenv.GlobRecursive("*.png", "icons")
icons_src += assetsenv.GlobRecursive("frame_rate", "icons")

icons = assetsenv.IconBuilder(Dir("compiled"), Dir("#/assets/icons"))
Depends(icons, icons_src)
Alias("icons", icons)


proto_src = Glob("protobuf/*.proto", source=True)
proto_options = Glob("protobuf/*.options", source=True)
proto = assetsenv.ProtoBuilder(Dir("compiled"), proto_src)
Depends(proto, proto_options)
# Precious(proto)
Alias("proto", proto)


dolphin_internal = assetsenv.DolphinSymBuilder(
    Dir("compiled"),
    Dir("#/assets/dolphin"),
    DOLPHIN_RES_TYPE="internal",
)
Alias("dolphin_internal", dolphin_internal)


dolphin_blocking = assetsenv.DolphinSymBuilder(
    Dir("compiled"),
    Dir("#/assets/dolphin"),
    DOLPHIN_RES_TYPE="blocking",
)
Alias("dolphin_blocking", dolphin_blocking)

proto_ver = assetsenv.Command(
    "protobuf_version.h",
    "#/assets/protobuf/Changelog",
    action=Action(
        proto_ver_generator,
        "\tPBVER\t${TARGET}",
    ),
)
Depends(proto_ver, proto)
Alias("proto_ver", proto_ver)

assets_parts = (icons, proto, dolphin_blocking, dolphin_internal, proto_ver)
assetsenv.Install("#/assets/compiled", assets_parts)

assetslib = assetsenv.Library("assets", assets_parts)
assetsenv.Install("${LIB_DIST_DIR}", assetslib)

# Resources for SD card

dolphin_external = assetsenv.DolphinExtBuilder(
    Dir("#/assets/resources/dolphin"),
    Dir("#/assets/dolphin"),
    DOLPHIN_RES_TYPE="external",
)
NoClean(dolphin_external)
if assetsenv["FORCE"]:
    AlwaysBuild(dolphin_external)
Alias("dolphin_ext", dolphin_external)


resources = assetsenv.Command(
    "#/assets/resources/Manifest",
    assetsenv.GlobRecursive("*", "resources", exclude="Manifest"),
    action=Action(
        '${PYTHON3} ${ASSETS_COMPILER} manifest "${TARGET.dir.posix}"',
        "\tRES\t${TARGET}",
    ),
)
# Depends(resources, dolphin_external)
Precious(resources)
NoClean(resources)
if assetsenv["FORCE"]:
    AlwaysBuild(resources)
Alias("resources", resources)

Return("assetslib")
