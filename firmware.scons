Import("ENV", "fw_build_meta")

import os

from fbt.fwbuild import FirmwareOutput

# Building initial C environment for libs
env = ENV.Clone()
Export("env")

env.Append(
    BUILD_DIR=fw_build_meta["build_dir"],
    PLUGIN_ELF_DIR="${BUILD_DIR}",
    LIB_DIST_DIR="${BUILD_DIR}/lib",
    LIBPATH=[
        "${LIB_DIST_DIR}",
    ],
    CPPDEFINES=[
        # ("TARGET", "${TARGET_HW}"),
    ],
    CPPPATH=[
        "#/core",
        "#/applications",
        "#/firmware/targets/f${TARGET_HW}/ble_glue",
        "#/firmware/targets/f${TARGET_HW}/fatfs",
        "#/firmware/targets/f${TARGET_HW}/furi_hal",
        "#/firmware/targets/f${TARGET_HW}/Inc",
        "#/firmware/targets/furi_hal_include",
    ],
    # Specific flags for building libraries - always do optimized builds
    FW_LIB_OPTS={
        "Default": {
            "CCFLAGS": [
                "-Os",
            ],
            "CPPDEFINES": [
                "NDEBUG",
                "FURI_NDEBUG",
            ],
        }
    },
)


if fw_build_meta["type"] == "updater":
    env.Append(
        FIRMWARE_BUILD_CFG="updater",
        RAM_EXEC=True,
        CPPDEFINES=[
            "FURI_RAM_EXEC",
        ],
    )
else:
    env.Append(
        FIRMWARE_BUILD_CFG="firmware",
        RAM_EXEC=False,
    )
# print(env.Dump())


# Invoke child SCopscripts to populate global `env` + build their own part of the code
depends = env.BuildModules(
    [
        "lib",
        "firmware",
        "assets",
        "core",
    ],
)


# Now, env is fully set up with everything to build apps
fwenv = env.Clone()

# Set up additional app-specific build flags
SConscript("site_scons/firmwareopts.scons", exports={"ENV": fwenv})
# Prepare manifest-related env methods
SConscript("site_scons/appmanifests.scons", exports={"ENV": fwenv})

# Set up app configuration
if env["FIRMWARE_BUILD_CFG"] == "updater":
    fwenv.Append(
        APPS=[
            "updater",
        ]
    )
else:
    fwenv.Append(
        APPS=[
            "crypto_start",
            # Svc
            "basic_services",
            # Apps
            "basic_apps",
            "updater_app",
            "archive",
            # Settings
            "passport",
            "system_settings",
            "about",
            # Plugins
            "basic_plugins",
            # Debug
            "debug_apps",
            "infrared_monitor",
        ]
    )

fwenv.LoadApplicationManifests()
fwenv.PrepareApplicationsBuild()

# Build external apps
extapps = SConscript("applications/extapps.scons", exports={"ENV": fwenv})


# Add preprocessor definitions for current set of apps
fwenv.AppendUnique(
    CPPDEFINES=fwenv["APPBUILD"].get_apps_cdefs(),
)


# Build applications.c for selected services & apps

# Depends on virtual value-only node, so it only gets rebuilt when set of apps changes
apps_c = fwenv.Command(
    "applications/applications.c",
    Value(fwenv["APPS"]),
    action=fwenv["APPS_C_ACTION"],
)

sources = [apps_c]
# Gather sources only from app folders from current configuration
for app_folder in fwenv["APPBUILD"].get_builtin_app_folders():
    sources += fwenv.GlobRecursive("*.c*", os.path.join("applications", app_folder))


fwenv.AppendUnique(
    LINKFLAGS=[
        "-specs=nano.specs",
        "-specs=nosys.specs",
        "-Wl,--start-group",
        "-lstdc++",
        "-lsupc++",
        "-Wl,--end-group",
        "-Wl,--gc-sections",
        "-Wl,--undefined=uxTopUsedPriority",
        "-Wl,--wrap,_malloc_r",
        "-Wl,--wrap,_free_r",
        "-Wl,--wrap,_calloc_r",
        "-Wl,--wrap,_realloc_r",
        "-u _printf_float",
        "-n",
    ],
)

# Debug
# print(fwenv.Dump())

# Full firmware definition

fwelf = fwenv.Program(
    "${FIRMWARE_BUILD_CFG}",
    sources,
    LIBS=[
        "flipper${TARGET_HW}",
        "core",
        "freertos",
        "stm32cubewb",
        "hwdrivers",
        "fatfs",
        "littlefs",
        "subghz",
        "flipperformat",
        "toolbox",
        "microtar",
        "usb_stm32",
        "st25rfal002",
        "infrared",
        "appframe",
        "assets",
        "misc",
        # 2nd round
        "flipperformat",
        "toolbox",
    ],
)

# Make it depend on everything child builders returned
Depends(fwelf, depends)
AddPostAction(fwelf, fwenv["APPBUILD_DUMP"])


fwhex = fwenv.HEXBuilder("${FIRMWARE_BUILD_CFG}")
fwbin = fwenv.BINBuilder("${FIRMWARE_BUILD_CFG}")
fwdfu = fwenv.DFUBuilder("${FIRMWARE_BUILD_CFG}")
# Default(dfu)
Alias(fwenv["FIRMWARE_BUILD_CFG"] + "_dfu", fwdfu)

# Additional FW-related pseudotargets
flash = fwenv.Flasher("${FIRMWARE_BUILD_CFG}")
if fwenv["FORCE"]:
    AlwaysBuild(flash)
Alias(fwenv["FIRMWARE_BUILD_CFG"] + "_flash", flash)


# Compile DB generation
cdb = fwenv.CompilationDatabase("compile_database.json")
Alias(fwenv["FIRMWARE_BUILD_CFG"] + "_cdb", cdb)

# fw_version_json = env["FW_VERSION_JSON"]
# Return("fwhex fwelf fwbin fw_version_json")

fw_output = FirmwareOutput(
    project=fwenv["FIRMWARE_BUILD_CFG"],
    dfu=fwdfu[0],
    elf=fwelf[0],
    bin=fwbin[0],
    json=env["FW_VERSION_JSON"][0],
    extapps=extapps,
)

Alias(fwenv["FIRMWARE_BUILD_CFG"] + "_all", fw_output.artifacts)

Return("fw_output")
