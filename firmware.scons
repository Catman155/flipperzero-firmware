Import("coreenv", "fw_build_meta")

import os

from fbt.appmanifest import FlipperAppType

# Building initial C environment for libs
env = coreenv.Clone()
Export("env")

env.Append(
    BUILD_DIR=fw_build_meta["build_dir"],
    LIB_DIST_DIR="${BUILD_DIR}/lib",
    LIBPATH=[
        "${LIB_DIST_DIR}",
    ],
    CPPDEFINES=[
        ("TARGET", "${TARGET_HW}"),
    ],
    CPPPATH=[
        "#/core",
        "#/applications",
        "#/firmware/targets/f${TARGET_HW}/ble_glue",
        "#/firmware/targets/f${TARGET_HW}/fatfs",
        "#/firmware/targets/f${TARGET_HW}/furi_hal",
        "#/firmware/targets/f${TARGET_HW}/Inc",
        "#/firmware/targets/furi_hal_include",
    ],
)

if fw_build_meta["type"] == "updater":
    env.Append(
        FIRMWARE_BUILD_CFG="updater",
        RAM_EXEC=True,
        CPPDEFINES=[
            "FURI_RAM_EXEC",
        ],
    )
else:
    env.Append(
        FIRMWARE_BUILD_CFG="firmware",
        RAM_EXEC=False,
    )
# print(env.Dump())


# Invoke child SCopscripts to populate global `env` + build their own part of the code
depends = env.BuildModules(
    [
        "lib",
        "firmware",
        "assets",
        "core",
    ],
)


# Now, env is fully set up with everything to build apps src
fwenv = env.Clone()
Export("fwenv")

# Set up additional app-specific build flags
SConscript("site_scons/firmwareopts.scons")
# Prepare manifest-related env methods
SConscript("site_scons/appmanifests.scons")

# Set up app configuration
if env["FIRMWARE_BUILD_CFG"] == "updater":
    fwenv.Append(
        APPS=[
            "updater",
        ]
    )
else:
    fwenv.Append(
        APPS=[
            "crypto_start",
            # Svc
            "basic_services",
            # Apps
            "basic_apps",
            "updater_app",
            "archive",
            # Settings
            "passport",
            "system_settings",
            "about",
            # Plugins
            "basic_plugins",
            # Debug
            "debug_apps",
            "infrared_monitor",
        ]
    )

fwenv.LoadApplicationManifests()
fwenv.PrepareApplicationsBuild()

# Add preprocessor definitions for current set of apps
fwenv.Append(
    CPPDEFINES=fwenv["APPBUILD"].get_apps_cdefs(),
)


# Build applications.c for selected services & apps

# Depends on virtual value-only node, so it only gets rebuilt when set of apps changes
apps_c = fwenv.Command(
    "applications/applications.c",
    Value(fwenv["APPS"]),
    action=fwenv["APPS_C_ACTION"],
)
AddPreAction(apps_c, fwenv["APPBUILD_DUMP"])


sources = [apps_c]
# Gather sources only from app folders from current configuration
for app_folder in fwenv["APPBUILD"].get_builtin_app_folders():
    sources += fwenv.GlobRecursive("*.c*", os.path.join("applications", app_folder))

# Clone current environment to build external apps later with its current state
appenv = fwenv.Clone()

fwenv.Append(
    LINKFLAGS=[
        "-specs=nano.specs",
        "-specs=nosys.specs",
        "-Wl,--start-group",
        "-lstdc++",
        "-lsupc++",
        "-Wl,--end-group",
        "-Wl,--gc-sections",
        "-Wl,--undefined=uxTopUsedPriority",
        "-Wl,--wrap,_malloc_r",
        "-Wl,--wrap,_free_r",
        "-Wl,--wrap,_calloc_r",
        "-Wl,--wrap,_realloc_r",
        "-u _printf_float",
        "-n",
    ],
)

# Debug
# print(fwenv.Dump())

# Full firmware definition

firmware_elf = fwenv.Program(
    "${FIRMWARE_BUILD_CFG}",
    sources,
    LIBS=[
        "flipper${TARGET_HW}",
        "core",
        "freertos",
        "stm32cubewb",
        "hwdrivers",
        "fatfs",
        "littlefs",
        "subghz",
        "flipperformat",
        "toolbox",
        "microtar",
        "usb_stm32",
        "st25rfal002",
        "infrared",
        "appframe",
        "assets",
        "misc",
        # 2nd round
        "flipperformat",
        "toolbox",
    ],
)

# Make it depend on everything child builders returned
Depends(firmware_elf, depends)


fwenv.HEXBuilder("${FIRMWARE_BUILD_CFG}")
fwenv.BINBuilder("${FIRMWARE_BUILD_CFG}")
dfu = fwenv.DFUBuilder("${FIRMWARE_BUILD_CFG}")
# Default(dfu)
Alias(fwenv["FIRMWARE_BUILD_CFG"] + "_all", dfu)

# Additional FW-related pseudotargets
flash = fwenv.Flasher("${FIRMWARE_BUILD_CFG}")
if fwenv["FORCE"]:
    AlwaysBuild(flash)
Alias(fwenv["FIRMWARE_BUILD_CFG"] + "_flash", flash)


# Compile DB generation
cdb = fwenv.CompilationDatabase("compile_database.json")
Alias(fwenv["FIRMWARE_BUILD_CFG"] + "_cdb", cdb)


# Building external applications

appenv.VariantDir("extapps", "applications", duplicate=False)
appenv.Replace(
    LINKER_SCRIPT="application-ext",
    STRIPFLAGS=[
        "--strip-debug",
        "--strip-unneeded",
        "-d",
        "-g",
        "-S",
    ],
)
appenv.Append(
    CCFLAGS=[
        "-Os",
        "-ggdb3",
        "-mword-relocations",
        "-mlong-calls",
        "-fno-common",
        "-nostdlib",
        "-fvisibility=hidden",
    ],
    LINKFLAGS=[
        "-r",
        "-s",
        # "-Bsymbolic",
        "-nostartfiles",
        "-mlong-calls",
        "-fno-common",
        "-nostdlib",
        "-Wl,--gc-sections",
        "-Wl,--no-export-dynamic",
        "-fvisibility=hidden",
        "-Wl,-e${APP_ENTRY}",
    ],
)

extapps = []
for app in fwenv["APPBUILD"].get_apps_of_type(FlipperAppType.PLUGIN):
    app_elf = appenv.Program(
        os.path.join("extapps", app.appid),
        appenv.GlobRecursive("*.c*", os.path.join("extapps", app._appdir)),
        APP_ENTRY=app.entry_point,
    )
    extapps.append(appenv.ELFStripper(app.appid, app_elf))
Alias(fwenv["FIRMWARE_BUILD_CFG"] + "_extapps", extapps)


Return("dfu")
