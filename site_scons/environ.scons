import SCons
from SCons.Platform import TempFileMunge
from fbt import utils

import os
import multiprocessing

Import("VARIABLES")

# Dirty hack to construct environment with PathVariable paths relative to
# upper dir
_cwd = os.getcwd()
os.chdir("..")

coreenv = Environment(
    variables=VARIABLES,
    tools=[
        "as",
        "gcc",
        "g++",
        "ar",
        "gnulink",
        "python",
        "sconsmodular",
        "sconsrecursiveglob",
    ],
    # OBJCOPY="objcopy",
    PYTHON3="python3",
    TEMPFILE=TempFileMunge,
    MAXLINELENGTH=2048,
    PROGSUFFIX=".elf",
    ENV={
        # Import PATH from OS env - scons doesn't do that by default
        "PATH": os.environ["PATH"],
        # Proxying CI environment to child scripts
        "DIST_SUFFIX": os.environ.get("DIST_SUFFIX", None),
        "WORKFLOW_BRANCH_OR_TAG": os.environ.get("WORKFLOW_BRANCH_OR_TAG", None),
    },
)

os.chdir(_cwd)

# If DIST_SUFFIX is set in environment, is has precedence (set by CI)
if os_suffix := os.environ.get("DIST_SUFFIX", None):
    coreenv.Replace(
        DIST_SUFFIX=os_suffix,
    )

# print(coreenv.Dump())
if not coreenv["VERBOSE"]:
    coreenv.SetDefault(
        CCCOMSTR="\tCC\t${SOURCE}",
        CXXCOMSTR="\tCPP\t${SOURCE}",
        ASCOMSTR="\tASM\t${SOURCE}",
        ARCOMSTR="\tAR\t${TARGET}",
        RANLIBCOMSTR="\tRANLIB\t${TARGET}",
        LINKCOMSTR="\tLINK\t${TARGET}",
        INSTALLSTR="\tINSTALL\t${TARGET}",
        APPSCOMSTR="\tAPPS\t${TARGET}",
        VERSIONCOMSTR="\tVERSION\t${TARGET}",
        STRIPCOMSTR="\tSTRIP\t${TARGET}",
    )

if coreenv["PLATFORM"] == "win32":
    # On Windows, Python 3 executable is usually just "python"
    coreenv["PYTHON3"] = coreenv["PYTHON3"][:-1]

Help(VARIABLES.GenerateHelpText(coreenv))


# Default value for commandline options

SetOption("num_jobs", multiprocessing.cpu_count())
# Avoiding re-scan of all sources on every startup
SetOption("implicit_cache", True)
SetOption("implicit_deps_unchanged", True)
# More aggressive caching
SetOption("max_drift", 1)
# Random task queue - to discover isses with build logic faster
# SetOption("random", 1)


# Setting up cross-compile tools
utils.prefix_commands(
    coreenv,
    "arm-none-eabi-",
    [
        "AR",
        "AS",
        "CC",
        "CXX",
        "OBJCOPY",
        "RANLIB",
        "STRIP",
    ],
)

# Setting up temp file parameters - to overcome command line length limits
coreenv["TEMPFILEARGESCFUNC"] = utils.tempfile_arg_esc_func
utils.wrap_tempfile(coreenv, "LINKCOM")
utils.wrap_tempfile(coreenv, "ARCOM")


Return("coreenv")
