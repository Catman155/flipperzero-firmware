from SCons.Platform import TempFileMunge
import SCons
import sutils

import os
import sys
import multiprocessing


vars = Variables(None, ARGUMENTS)
vars.Add(BoolVariable("VERBOSE", help="Print full commands", default=0))
vars.Add(BoolVariable("FORCE", help="Force target action", default=0))
vars.Add(BoolVariable("DEBUG", help="Enable debug build", default=1))
vars.Add(BoolVariable("COMPACT", help="Optimize for size", default=0))
vars.Add(
    EnumVariable(
        "TARGET_HW",
        help="Hardware target",
        default="7",
        allowed_values=[
            "7",
        ],
    )
)


coreenv = Environment(
    variables=vars,
    tools=["as", "gcc", "g++", "ar", "gnulink", "python", "compilation_db"],
    OBJCOPY="objcopy",
    PYTHON3="python3",
    STRIP="strip",
    STRIPFLAGS=[],
    STRIPCOM="$STRIP $STRIPFLAGS $SOURCES -o $TARGET",
    TEMPFILE=TempFileMunge,
    MAXLINELENGTH=2048,
    PROGSUFFIX=".elf",
    COMPILATIONDB_USE_ABSPATH=True,
    ENV={
        "PATH": os.environ["PATH"],
    },
)

if not coreenv["VERBOSE"]:
    coreenv.Replace(
        CCCOMSTR="\tCC\t${SOURCE}",
        CXXCOMSTR="\tCPP\t${SOURCE}",
        ASCOMSTR="\tASM\t${SOURCE}",
        ARCOMSTR="\tAR\t${TARGET}",
        RANLIBCOMSTR="\tRANLIB\t${TARGET}",
        LINKCOMSTR="\tLINK\t${TARGET}",
        INSTALLSTR="\tINSTALL\t${SOURCE}",
        APPSCOMSTR="\tAPPS\t${TARGET}",
        VERSIONCOMSTR="\tVERSION\t${TARGET}",
        # STRIPCOMSTR="\tSTRIP\t${TARGET}",
    )

if coreenv["PLATFORM"] == "win32":
    # On Windows, Python 3 executable is usually just "python"
    coreenv["PYTHON3"] = coreenv["PYTHON3"][:-1]

Help(vars.GenerateHelpText(coreenv))


# Default value for commandline options

SetOption("num_jobs", multiprocessing.cpu_count())
SetOption("implicit_cache", True)
SetOption("implicit_deps_unchanged", True)
SetOption("max_drift", 1)
SetOption("random", 1)
# coreenv.Decider("content-timestamp")


# Set up cross-compile tools

sutils.prefix_commands(
    coreenv,
    "arm-none-eabi-",
    [
        "AR",
        "AS",
        "CC",
        "CXX",
        "OBJCOPY",
        "RANLIB",
        "STRIP",
    ],
)

# Setting up temp file parameters

coreenv["TEMPFILEARGESCFUNC"] = sutils.tempfile_arg_esc_func

# Commandline length limit hack

sutils.wrap_tempfile(coreenv, "LINKCOM")
sutils.wrap_tempfile(coreenv, "ARCOM")


# Build env extensions


def GlobRecursive(env, pattern, node=".", exclude=None):
    results = []
    if isinstance(node, str):
        node = Dir(node)
    for f in node.glob("*", source=True, exclude=exclude):
        if isinstance(f, SCons.Node.FS.Dir):
            results += coreenv.GlobRecursive(pattern, f, exclude)
    results += node.glob(
        pattern,
        source=True,
        exclude=exclude,
    )
    # print(f"Glob for {pattern} from {node}: {results}")
    return results


def BuildModule(env, module):
    # print("cwd", os.getcwd())
    # print(type(Dir(".").srcdir), dir(Dir(".").srcdir))
    src_dir = str(Dir(".").srcdir or os.getcwd())
    module_sconscript = os.path.join(src_dir, module, "SConscript")
    if not os.path.exists(module_sconscript):
        module_sconscript = os.path.join(src_dir, f"{module}.scons")
        if not os.path.exists(module_sconscript):
            print(f"Cannot build module {module}: scons file not found")
            Exit(2)

    return env.SConscript(
        module_sconscript,
        variant_dir=os.path.join(env["BUILD_DIR"], module),
        duplicate=0,
    )


def BuildModules(env, modules):
    result = []
    for module in modules:
        build_res = env.BuildModule(module)
        # print("module ", module, build_res)
        if build_res is None:
            continue
        result.append(build_res)
    return result


coreenv.AddMethod(GlobRecursive)
coreenv.AddMethod(BuildModule)
coreenv.AddMethod(BuildModules)

Export("coreenv")
